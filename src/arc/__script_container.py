from abc import ABC, abstractmethod
from typing import Dict, Type
import arc._utils as util
from arc.script import script_factory
from arc.script.script import Script
from arc.config import Config
from arc.errors import ScriptError
from arc.script import ScriptType


class ScriptContainer(ABC):
    """Parent class of CLI and Utility"""

    def __init__(self, arcdir=".", arcfile=".arc", script_type=ScriptType.KEYWORD):
        self.script_type = script_type
        self.scripts: Dict[str, Type[Script]] = {}
        self.script("help", script_type=ScriptType.KEYWORD)(self.helper)

        if arcfile is not None and not Config._loaded:
            Config.load_arc_file(f"{arcdir}/{arcfile}")

    @abstractmethod
    def __call__(self):
        pass

    def script(self, name=None, script_type=None):
        """Installs a script to the container
        Creates a script object, appends it to
        the script container

        :returns: the provided function, for decorator chaining. As such,
            you can give one function multiple script names
        """
        if script_type is None:
            script_type = self.script_type

        def decorator(function):
            script = script_factory(name, function, script_type)
            self.scripts[script.name] = script
            util.logger(
                f"Registered '{script.name}' script to {self.__class__.__name__}",
                state="debug",
            )
            return function

        return decorator

    @util.timer
    def execute(self, script_node):
        """Executes the script from the user's command

        :param script_node: ScriptNode object generated by the parser
            contains both the options and flags for the script

        :raises ScriptError: If the command doesn't exist

        :excepts ExecutionError: Raised during the execution of a script anytime
            bad data is passed or something unexpected happens
        """

        if script_node.name not in self.scripts:
            raise ScriptError(f"The script '{script_node.name}' is not recognized")

        script = self.scripts[script_node.name]
        script(script_node)

    @abstractmethod
    def helper(self):
        pass
